<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Test</title>
    <link href="/2022/10/22/test/"/>
    <url>/2022/10/22/test/</url>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>Programing</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>KMP</title>
    <link href="/2022/03/16/vue-xue-xi-bi-ji-fu-ben/"/>
    <url>/2022/03/16/vue-xue-xi-bi-ji-fu-ben/</url>
    
    <content type="html"><![CDATA[<h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><p>模式(Pattern)匹配，模式串就是子串，解决的是查找子串在主串中出现的位置。</p><h4 id="暴力算法"><a href="#暴力算法" class="headerlink" title="暴力算法"></a>暴力算法</h4><p>暴力算法是对主串的每一位都进行检测，能否与模式串的第一位匹配，两层循环，最坏复杂度是O(mn)。</p><p>极端情况下，如00000000000001，和000001，每次匹配都是到最后一位才发现1和0不等，然后又重新比较，因此耗时大。</p><h4 id="KMP思想"><a href="#KMP思想" class="headerlink" title="KMP思想"></a>KMP思想</h4><p>如果已经匹配好相等的序列里，有【后缀】 是某个【前缀】，直接把模式串向前滑动到【模式串的前缀】和【原串后缀】对齐的位置即可。</p><p>比如：</p><p> a b c d e f g</p><p> a b c g</p><p>匹配到第四位失败了，模式串应该直接向前移动三位</p><p>但是如果是：</p><p> a b a d e f g</p><p> a b a e </p><p>匹配到第四位失败了，模式串应该向前移动两位</p><p>如果是：</p><p>a a a a a a b</p><p>a a a b</p><p>匹配到第四位失败了，模式串应该向前移动</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>Programing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试初战-微软</title>
    <link href="/2022/01/21/interview-microsoft/"/>
    <url>/2022/01/21/interview-microsoft/</url>
    
    <content type="html"><![CDATA[<p>已经2022年了！大三上学期告一段落，我也要开始探索新的可能啦~</p><p>本篇文章分享一下微软23届暑期提前批面试的经历。</p><h5 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h5><h5 id="简历投递"><a href="#简历投递" class="headerlink" title="简历投递"></a>简历投递</h5><p>虽然是暑假的实习，但是提前批的截止时间很急急，在元旦假期的时候就截止了。之前从来没投过简历，12月底还是考试周没时间仔细雕琢……总之，在和朋友去迪士尼前的一两天，急急的制作了一份朴实的简历，实习也没有，竞赛也没有，能罗列的项目也只有课程项目。很意外的居然过了，不过身边小伙伴据我所知也都过了。</p><h5 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h5><p>1.18上午进行的一面。开了摄像头，没有自我介绍环节，面试官一开始就让我写算法题，名曰“做一点coding的练习热热身”，题目是Leetcode 46.<a href="https://leetcode-cn.com/problems/permutations/">全排列</a> ，非常遗憾我不会&gt;w&lt; </p><p>场面一度十分尴尬，十分和善的面试官还说这是“从最简单的开始”……。唉，但是他实在太温柔了，最后他教了我四十分钟。先让我把斐波那契写了，再启发我一步步怎么写递归终止条件，甚至建立数组的长度怎么确定……就差一行行念出来了。花了四十分钟，本猪头终于写好了，善良的面试官又问我有没有什么问题，我说实在对不起我给您添麻烦了、以后会努力做题的。面试官说没事，可能只是这次面试我没match到考核的内容，以后说不定就会了，而且我才大三还有机会，blabla。总之，他真的很好，但我真的很尬。</p><h5 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h5><p>同天下午进行的二面，中间只间隔了两三个小时，我还没从悲痛中缓和过来，差点就咕咕了hr小姐姐（但怕被拉黑，还是硬着头皮去了）</p><p>这次没开摄像头，做了自我介绍，面试官问了我做了什么项目。</p><p>面试官对非关系型数据库的项目比较感兴趣，先问了大致如何实现，如何存储，又展开聊了很多很多，回忆一下我能想到的问题：</p><ul><li>为什么选用非关系型数据库？</li><li>为什么选用Neo4j？</li><li>我们用了两种数据库，如何跨库保证一致性的问题？（展开问了系统设计，我回答的不太好，说了轮询定时检查、建立副本方便回滚什么的……感觉不太有条理，如果再让我回答一次，我会按不同场景来说。如：强一致性要求下，可以代码加锁；弱一致性要求下，可以将操作按顺序存储在队列中，并且可以参照课上讲的那些，比如GFS等结合起来，针对不同场景下不同的一致性要求来说。）</li><li>你觉得非关系数据库和关系型数据库有哪些区别？（我讲了一些泛泛的，适用场景的问题。他纠正了，是要询问我具体在使用过程中有哪些区别）</li></ul><p>项目讲完了，也过去了大半时间。问了我一个公共前缀的问题，题目和 Leetcode 14.<a href="https://leetcode-cn.com/problems/longest-common-prefix/">最长公共前缀</a> 比较类似，但他说的是输入所有单词后，再输入一个字符串，输出所有以它为前缀的单词。（跟Leetcode 745.<a href="https://leetcode-cn.com/problems/prefix-and-suffix-search/">前缀和后缀搜索</a> 的前缀搜索也差不多，但不需要返回下标，返回的是单词） </p><p>唉这我哪会啊，hard的题我看甚至都不打算做的。我口述了暴力搜索法，承认了这样的时间复杂度和占用内存很多，请面试官教教我怎么解题……面试官问我有没有学过字典树，我说没，然后他让我用Bing搜索，找了个词条让我看。我看完了又来问我一些问题，每个节点怎么存，怎么解题，复杂度什么的。我说的也不知道怎么样，自我感觉只弄懂了个大概吧。也不抱希望能进下一轮面试了。</p><h5 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h5><p>神奇的事情发生了，我居然进了三面，这是怎样的狗屎运降临在我的头上？</p><p>三面是1.21下午，没开摄像头，做了自我介绍，依旧是一位很和善的面试官。</p><p>同样展开问了非关系型的项目，大概20分钟左右，详细问了数据库设计。然后一直追着我问，他觉得关系型也完全能胜任啊，为什么不用sql。我看似扯了不少，实际上说来说去，只知道用sql查我这里的需求会需要多张大长表join起来，很耗时，但是图数据库就不用。他就说，那如果用sql的话，把join的内容缓存起来不行吗，我也是乱回答的…………</p><p>其实我今天早上看了一篇sql存储，redis做缓存的技术文章，早知道应该再认真点看看的，呜呜呜。</p><p>剩下的20分钟考了LeetCode 53. <a href="https://leetcode-cn.com/problems/maximum-subarray/">最大子数组和</a> 终于是我做过的easy题了，内心狂喜。结果写了dp，发现我上次写到这里有的用例没过，我也没管它就放弃了。。。。内心一阵无语，当时太紧张了也没看出来错哪。面试官提醒我也可以滑动窗口，我哼哧哼哧磨磨唧唧地重新写了，写出来了，但是20多分钟过去了（好悲伤），感觉多少有一些不妙。。。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>哎，第一次面试的经历就这样在一次次的想要放弃和一次次的硬着头皮中结束了。</p><p>最终结果不出意外会凉，好在这还是第一次投简历，还来得及多做题、多准备、多背八股文。</p><p>加油吧 XD</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>Interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Order Statistics</title>
    <link href="/2022/01/12/leetcode215/"/>
    <url>/2022/01/12/leetcode215/</url>
    
    <content type="html"><![CDATA[<p>T215 数组中的第K个最大元素，常见面试题，也是算法导论9.2/9.3一节中Order Statistics一节的内容，在线性时间内查找数组中第K个最大的元素，将学习过程整理到本文中。</p><span id="more"></span><h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h3><p>partition是快排的核心思想，即选定一个pivot，把比pivot小的元素甩到pivot左边，比它大的元素甩到其右边，最终返回的是pivot所在的index。</p><p>具体实现时，参照书上的思路，选定最后数组里最后一个值为pivot。用j遍历数组，用i、j两个指针标记，循环不变式为：<strong>arr[begin,i]</strong>≤pivot，<strong>arr[i+1,j-1]</strong>&gt;pivot。</p><p>遇到比pivot小的，i右移，比pivot小的数增多。交换j和i。</p><p>遇到比pivot大的，j右移。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//arr[left..i]表示比pivot小的数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> left<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>    <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="顺序统计量"><a href="#顺序统计量" class="headerlink" title="顺序统计量"></a>顺序统计量</h3><p>寻找第K大的，<strong>即寻找index为length-K的数</strong>。</p><p>核心思想就是利用partition，只处理划分后的半边。直到partition选择的pivot的index即为第K大的数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> target <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> target<span class="token punctuation">)</span>                <span class="token keyword">return</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>                left <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> right <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>Programing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>partition</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="/2021/10/21/vue-xue-xi-bi-ji/"/>
    <url>/2021/10/21/vue-xue-xi-bi-ji/</url>
    
    <content type="html"><![CDATA[<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>assets：图片等各种资源</p><p>componets: 组件</p><p>router:路由</p><p>store: 页面存储的变量 页面跳转时的变量</p><p>views：识图存储的位置 把组件引入</p><p>package.json :依赖</p><p>App.vue 引入组件应用到所有页面</p><h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3><ul><li>基本信息查询</li><li>站点查询：可以查线路的站点信息</li></ul><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>要实现的功能：</p><p>1.输入一个线路的名字，如“30路公交”，列出线路的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>Programing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetcodeT74搜索二维矩阵</title>
    <link href="/2021/09/27/leetcode74/"/>
    <url>/2021/09/27/leetcode74/</url>
    
    <content type="html"><![CDATA[<p>详细解释了二分查找在不同条件下该如何设定缩减边界，以及总结了几种模板。</p><span id="more"></span><h3 id="二分查找的三种类型"><a href="#二分查找的三种类型" class="headerlink" title="二分查找的三种类型"></a>二分查找的三种类型</h3><p>写一个找准确值的都会写，但是每次稍作变换，比如“找比x大的最小的数”，或者如T34一样有重复值的左边界，等等，我就晕了orz。</p><p>看了一个b站视频，感觉自己仿佛懂了，因此在这里记录下来。</p><p>首先，无论如何，二分查找有两个必须要满足的条件：</p><ul><li>每次都要缩减搜索区域</li><li>每次缩减不能排除掉答案</li></ul><p>在以上条件的基础下，up主将不同类型的题目整理出如下的三大模板。</p><h4 id="1-找准确值"><a href="#1-找准确值" class="headerlink" title="1.找准确值"></a>1.找准确值</h4><blockquote><p>这是最简单的情况，大家都会。</p></blockquote><ul><li><p>循环条件 ： start &lt;= end</p></li><li><p>缩减空间 ： start = mid +1</p><p>​                     end = mid -1</p></li></ul><h4 id="2-找模糊值"><a href="#2-找模糊值" class="headerlink" title="2.找模糊值"></a>2.找模糊值</h4><blockquote><p>这就有好多情况了，题目里也经常遇到，比如找比target大的最小数这种，还有某个数的左边界右边界什么的，但依然注意这两件事就可以。</p></blockquote><ul><li><p>循环条件 ： start &lt; end</p></li><li><p>缩减空间 ： start = mid</p><p>​                     end = mid - 1</p><p>​        或者： start = mid + 1</p><p>​                     end = mid</p></li></ul><p>那么这两种缩减空间应该在如何选择呢？举个例子，例如，想要寻找2的左边界，数组可能为两种情况：</p><table><thead><tr><th>1</th><th>1</th><th>2</th><th>==2==</th><th>2</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>==2==</td><td>2</td><td>6</td><td>7</td></tr></tbody></table><p>查找到2后，这个2可能就是左边界，也可能它的左边还有2，因此要继续搜索左边的区域、并且不能排除掉这个2。</p><p>因此，此时的缩减空间应该为end = mid。也就对应的前文第二种缩减空间。</p><p>相应的，如果此时mid值小于2，那么mid值一定不会为答案，直接在右边查找就可以，缩减空间是start = mid + 1。</p><p>其他的时候也都依靠这种思路分析，发现比以前清楚了好多。</p><p>这里还有一个小问题，为什么这里的判断条件是start&lt;end，而不是找准确值时的start&lt;=end了呢？</p><p>这是因为，缩减时会有start = mid 或者 end = mid的情况，如果数组只有一个值，缩减也没用，会陷入死循环。</p><h4 id="3-通用型"><a href="#3-通用型" class="headerlink" title="3.通用型"></a>3.通用型</h4><blockquote><p>还有一种情况是，要找到最接近target的值。</p></blockquote><ul><li><p>循环条件 ： start &lt; end - 1</p></li><li><p>缩减空间 ： start = mid </p><p>​                     end = mid </p><p>此时，start和end相邻时就可以结束了，因此缩减只要=mid就可以了。</p><p>这种方法的优点就在于可以留下两个值，最后可以比较一下哪个更接近target。</p></li></ul><h4 id="mid的写法"><a href="#mid的写法" class="headerlink" title="mid的写法"></a>mid的写法</h4><p>mid的写法也有两点需要注意，第一是注意溢出的问题，第二是当数组长度为偶数时，指针会在中间偏左的数上，在某些条件下会死循环。有时应该让它在中间偏右的数上，也需要考虑一下。</p><p>可以参照的写法如下：</p><pre class="line-numbers language-java"><code class="language-java">mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Leetcode-T74"><a href="#Leetcode-T74" class="headerlink" title="Leetcode T74"></a>Leetcode T74</h3><p>学好了思路就开始做题。首先我想要在第一列中，找出小于等于target的数里，最大的那一个。</p><p>那么缩减空间应该是什么样的呢？</p><p>如果mid大于target，答案肯定在左侧，不会包括mid，也就是end=mid-1 ；</p><p>如果mid小于target，答案可能是mid，也可能还在右边，因此start = mid 。</p><p>接下来考虑mid的问题，由于缩减时可能start = mid，当只有两个值的时候 ，左边的是start也是mid，会死循环，因此注意我们要让mid落在中间偏右的那个位置上。</p><p>找到答案所在行的二分搜索代码如下：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">BinarySearchRow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                start <span class="token operator">=</span> mid <span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> start<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到答案的所在行之后，在当前行查找出答案，由于不会有重复值的情况，只要用最基础的准确查找就可以了。</p><p>找到指定行后，查找出所在位置的代码如下：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">BinnarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>                start<span class="token operator">=</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span>                end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>Programing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode T34 二分查找</title>
    <link href="/2021/09/15/leetcode34/"/>
    <url>/2021/09/15/leetcode34/</url>
    
    <content type="html"><![CDATA[<p>一道二分查找的题目，在有重复值的情况下查找两侧边界，但是感觉理解不太成熟，写的也不够清楚……可以略过这篇了。</p><span id="more"></span><h3 id="T34题目"><a href="#T34题目" class="headerlink" title="T34题目"></a>T34题目</h3><p>给定一个按照升序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p><pre><code>输入：nums = [5,7,7,8,8,10], target = 8输出：[3,4]</code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h3 id="朴实无华的二分查找（循环版）"><a href="#朴实无华的二分查找（循环版）" class="headerlink" title="朴实无华的二分查找（循环版）"></a>朴实无华的二分查找（循环版）</h3><pre class="line-numbers language-java"><code class="language-java">pulic <span class="token keyword">int</span> <span class="token function">binnarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span>              end<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>              start<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>              <span class="token keyword">return</span> target<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意边界的处理</li><li>无法处理有重复值的情况</li></ul><h3 id="处理有重复值时的二分查找"><a href="#处理有重复值时的二分查找" class="headerlink" title="处理有重复值时的二分查找"></a>处理有重复值时的二分查找</h3><p>题目中要处理有重复值的情况，查找左边界和右边界的方法是不一样的。</p><h4 id="查找左边界"><a href="#查找左边界" class="headerlink" title="查找左边界"></a>查找左边界</h4><p>区别就在于，当target=mid时，mid不一定是左边界。所以要把target=mid的情况放进区间里,而不能查找到target=mid就返回这个mid。</p><ul><li>查找大于等于target的mid值，假设其为左边界。如果在mid的左边，也就是[start，mid-1]中还有大于等于target的mid值，就更新左边界。</li><li>如果target不存在，最后返回的值是第一个大于target的值。</li></ul><pre class="line-numbers language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查找右边界"><a href="#查找右边界" class="headerlink" title="查找右边界"></a>查找右边界</h4><ul><li>查找大于target的mid值，假设其为ans，即<strong>右边界+1</strong>(其实找的是第<strong>一个大于target的值</strong>）。如果在mid左边还有大于target的值，就更新ans。</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">boolean</span> lower<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>Programing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode T3 无重复字符的最长字串</title>
    <link href="/2021/09/13/leetcode3/"/>
    <url>/2021/09/13/leetcode3/</url>
    
    <content type="html"><![CDATA[<p>简单的字符串，学习滑动窗口的思想。</p><span id="more"></span><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><p>输入: s = “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>最初的想法是对每个字母s[i]，遍历s[i]到s[n]，记录最短的子串。</p><p>但是可以优化的点在于，可以省去一些重复的检查。</p><p>比如  s = “abcdeab”</p><p>当检测出abcde不重复，遇到a停止检测，对b进行检测，bcde是不需要重复检测的。因此把它想象成一个可以滑动的窗口就可以减少开销。</p><p>然后想到，用hashmap存储窗口里的值，这样每次检查containskey的时候开销是O(1)。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> hashmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> head<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tail<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> tail <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hashmap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>                tail<span class="token operator">++</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>tail<span class="token operator">-</span>head <span class="token operator">></span> max<span class="token punctuation">)</span>                max<span class="token operator">=</span>tail<span class="token operator">-</span>head<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                hashmap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                head<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>发现自己不能只追求做出来了……执行时间超过76% 内存竟然只超过5%</p><p>2333</p><p>所以不需要新建一个charArray来存。</p><p>java String中的charAT() 方法就可以取出来某个索引位置的值。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>Programing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>字符串</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode T2 两数相加</title>
    <link href="/2021/09/12/leetcode2/"/>
    <url>/2021/09/12/leetcode2/</url>
    
    <content type="html"><![CDATA[<p>开始做题了！</p><p>简单的模拟题 复习java基础</p><span id="more"></span><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>要有两个引用对象，起到指针的作用，指向链表的head和当前所在位置cur。</p><h3 id="Java中的对象和引用"><a href="#Java中的对象和引用" class="headerlink" title="Java中的对象和引用"></a>Java中的对象和引用</h3><pre class="line-numbers language-java"><code class="language-java">Listnode pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>new Listnode()在<strong>堆空间</strong>里创建了一个Listnode对象。</p><p>Listnode pre 创建了一个<strong>引用变量</strong>，储存在<strong>堆栈</strong>里。</p><p>同一个对象被多个引用变量引用，共同影响这个对象本身。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> carry<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span> null <span class="token operator">||</span> l2<span class="token operator">!=</span>null <span class="token operator">||</span> carry<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> n1 <span class="token operator">=</span> l1 <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">int</span> n2 <span class="token operator">=</span> l2 <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> n1<span class="token operator">+</span>n2<span class="token operator">+</span>carry<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carry<span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token operator">!=</span>null<span class="token punctuation">)</span>                l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token operator">!=</span>null<span class="token punctuation">)</span>                l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>Programing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>Single LinkedList</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode T1 两数之和</title>
    <link href="/2021/09/10/leetcode1/"/>
    <url>/2021/09/10/leetcode1/</url>
    
    <content type="html"><![CDATA[<p>开始做题了！学习了java中 hash map的用法。</p><span id="more"></span><h3 id="时间复杂度的分析"><a href="#时间复杂度的分析" class="headerlink" title="时间复杂度的分析"></a>时间复杂度的分析</h3><p>暴力搜索的情况下，对每个元素都要遍历一遍剩下的其他元素，复杂度是$$O（n^2）$$。但如果采用<strong>哈希表</strong>，对每个元素$$nums[i]$$，都要从哈希表里查找是否存在$$target-nums[i]$$，这个操作的复杂度是$$O(1)$$,因此对所有元素都执行一遍是$$O(n)$$.</p><blockquote><p>不用考虑是怎么插入的……反正从哈希表里get/put/containsKey都是O(1)。常数倍之后还是O(1)。</p></blockquote><h3 id="Java中的HashMap"><a href="#Java中的HashMap" class="headerlink" title="Java中的HashMap"></a>Java中的HashMap</h3><ul><li><strong>HashMap&lt;K,V&gt;</strong>：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</li></ul><ul><li><p>创建Hashmap</p><pre class="line-numbers language-java"><code class="language-java">HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span>myHashmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>Map接口中的常用方法</strong></p><ul><li><p>get(Object key)</p><p>根据key获得value。</p></li><li><p>put(K key,V value)</p><p>添加键值对。</p></li><li><p>remove(Object key)</p><p>根据key删除元素，会返回key对应的value值。</p></li><li><p>size()</p><p>返回HashMap中的元素数量。</p></li><li><p>containsKey()</p><p>检查hashMap中是否存在指定的key。</p></li><li><p>containsValue()</p><p>检查hashMap中是否存在指定的value。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>Programing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>Hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建博客踩坑:只能显示主页面</title>
    <link href="/2021/09/08/hexo-cai-keng/"/>
    <url>/2021/09/08/hexo-cai-keng/</url>
    
    <content type="html"><![CDATA[<p>部署后，只有主页面是正常的，其他页面的样式错乱、图片丢失。</p><p>其实还是路径的问题啦。</p><span id="more"></span><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>去年捣鼓了Hexo，本着好玩的心态想自己搭建一个博客。最近大三了重拾出来，想要记录一些自己的学习过程。但是却踩坑连连……</p><p>我使用的主题叫做fluid，很优雅。配置后，主页面很快可以正常显示，但是点击文章里面的内容却是没有样式的样子。此外归档页/分类页等等也都是没有样式的。</p><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>通过hexo g 命令生成页面后，就生成了./.deploy_git文件夹，我天真的以为，在deploy或者public文件夹里看到的html界面，就会是最终的效果。然而真的是这样嘛？</p><p>如果查看github的仓库，就会发现，提交是只提交了public文件夹下的内容的。所以当public下的内容上传后，<strong>这个public目录下的内容，就是服务器的根目录。</strong></p><p>那么，我直接打开这些生成的html，比如这个“About me”的页面，它的<strong>路径是/public/about/index.html</strong>，我发现这里面所有路径的地方都是这样写的：</p><pre class="line-numbers language-javascript"><code class="language-javascript"> style<span class="token operator">=</span>"background<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'./img/bg2.jpg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样写的：</p><pre class="line-numbers language-javascript"><code class="language-javascript">href<span class="token operator">=</span><span class="token string">"./lib/hint/hint.min.css"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等等。</p><p>这个 <strong>./</strong> 就是当前文件所在的目录。</p><p>但是呢，当前文件的路径是./public/about/index.html</p><p>而代码里./ 定位到当前目录，即public/about这里！但是img文件夹、lib文件夹，却是在根目录public/下的，在about里是找不到它们的~于是导致了这个页面的图片丢失，样式无法显示的问题。</p><p><img src="/.io//mulu.png" alt=""></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>配置路径的地方，应当是在根目录的_config.yml文件里，#URL的地方。</p><p>其中第一个地址作用是打开网页后第一个显示的入口。</p><p>第二个地址的作用是静态网页的部署目录。我之前设置的是 <strong>./</strong></p><p>这就导致了如前文所说，生成的html文件里，路径写的也是：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">.</span><span class="token operator">/</span>img<span class="token operator">/</span>bg2<span class="token punctuation">.</span>jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了让他能找到public/img，只要在配置文件的第二个地址里写一个<strong>/</strong>就可以了。</p><p>这样生成的html里路径就变成了：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">/</span>img<span class="token operator">/</span>bg2<span class="token punctuation">.</span>jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>于是，在寻找样式的时候，找到的是public/img，按道理应该可以了。</p><p>尝试一下。</p><p>终于成功了！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>Programing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BLOG初体验</title>
    <link href="/2020/06/20/my-new-post/"/>
    <url>/2020/06/20/my-new-post/</url>
    
    <content type="html"><![CDATA[<h5 id="第一次写博客。"><a href="#第一次写博客。" class="headerlink" title="第一次写博客。"></a>第一次写博客。</h5><h5 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h5><h5 id="BLOG初体验"><a href="#BLOG初体验" class="headerlink" title="BLOG初体验"></a>BLOG初体验</h5><p>小白今天第一天尝试用Hexo、Typora写自己的博客。写博客的主要目的是学习记录和日常生活的记录，内容可能包括但不限于：</p><ul><li><p>课堂的学习笔记（譬如，这个假期需要重新好好的学一遍CSAPP，保证别挂科）</p></li><li><p>刷题的记录和心得（看到同专业的大佬们都做了很多题，深感自己的努力不够，为了今后无论是考研、面试还是找工作，力求多做题、多整理、多学习）</p></li><li><p>关于建模的学习（和好朋友报了建模的比赛，这个假期要多get一些知识）</p></li><li><p>护肤的打卡和心得（要做精致小女孩，变美变漂亮！）</p></li></ul><h5 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h5><p>一个很菜很菜很菜的软件学生，目前在上海读书。业余喜欢摄影和设计，最近在捣鼓自己的脸。目前的理想是变厉害的同时达到88斤:<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p><p>最后，试一下能不能用PicGo+图床插入图片吧~</p><p><img src="https://raw.githubusercontent.com/Quinn-SU/FigureBed/img/img/haibao.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <categories>
      
      <category>Talking</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
